upstream unicorn_<%= fetch(:application) %> {
  server unix:/tmp/unicorn.<%= fetch(:application) %>.sock fail_timeout=0;
}

<% if fetch(:nginx_use_ssl) %>
server {
  listen 88;
  rewrite ^(.*) https://$host$1 permanent;
}
<% end %>

server {
<% if fetch(:nginx_use_ssl) %>
  listen 443;
  ssl on;
  ssl_certificate /etc/ssl/certs/<%= fetch(:nginx_ssl_certificate) %>;
  ssl_certificate_key /etc/ssl/private/<%= fetch(:nginx_ssl_certificate_key) %>;
<% else %>
  listen 88;
<% end %>

  server_name <%= fetch(:nginx_server_name) %>;
  root <%= current_path %>/public;
  try_files $uri/index.html $uri @unicorn_<%= fetch(:application) %>;

  location @unicorn_<%= fetch(:application) %> {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
<% if fetch(:nginx_use_ssl) %>
    proxy_set_header X-Forwarded-Proto https;
<% end %>
    proxy_pass http://unicorn_<%= fetch(:application) %>;
    # limit_req zone=one;
    access_log <%= shared_path %>/log/nginx.access.log;
    error_log <%= shared_path %>/log/nginx.error.log;

<% if fetch(:nginx_use_cors) %>
    # from https://gist.github.com/alexjs/4165271
    if ($http_origin ~* (localhost:9000|devi7\.us\.to|other\.else\.com)) {
      set $cors "true";
    }
    # Nginx doesn't support nested If statements. This is where things get slightly nasty.
    # Determine the HTTP request method used
    if ($request_method = 'OPTIONS') {
      set $cors "${cors}options";
    }
    if ($request_method = 'GET') {
      set $cors "${cors}get";
    }
    if ($request_method = 'POST') {
      set $cors "${cors}post";
    }
    if ($cors = "true") {
    # Catch all incase there's a request method we're not dealing with properly
      add_header 'Access-Control-Allow-Origin' "$http_origin";
    }
    if ($cors = "trueget") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, PATCH, OPTIONS, DELETE';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    }
    if ($cors = "trueoptions") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      # Om nom nom cookies
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, PATCH, OPTIONS, DELETE';
      # Custom headers and headers various browsers *should* be OK with but aren't
      add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      # Tell client that this pre-flight info is valid for 20 days
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    if ($cors = "truepost") {
      add_header 'Access-Control-Allow-Origin' "$http_origin";
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, PATCH, OPTIONS, DELETE';
      add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    }
<% end %>
  }

  location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
    add_header Last-Modified "";
    add_header ETag "";

    open_file_cache max=1000 inactive=500s;
    open_file_cache_valid 600s;
    open_file_cache_errors on;
    break;
  }

  client_max_body_size 4G;
  keepalive_timeout 10;

  error_page 403 404 405 406 /404.html;
  error_page 500 502 504 /500.html;
  error_page 503 @503;

  location = /50x.html {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://unicorn_<%= fetch(:application) %>/500;
  }

  location = /404.html {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://unicorn_<%= fetch(:application) %>/404;
  }

  location @503 {
    error_page 405 = /system/maintenance.html;
    if (-f $document_root/system/maintenance.html) {
      rewrite ^(.*)$ /system/maintenance.html break;
    }
    rewrite ^(.*)$ /503.html break;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 405;
  }

  if (-f $document_root/system/maintenance.html) {
    return 503;
  }

  # API documentation support
  location ~ /api-doc/.*.(php|html)$ {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

    proxy_pass http://unicorn_brasbe;
    # limit_req zone=one;
    access_log /home/nsn/app/brasbe/shared/log/nginx.access.log;
    error_log /home/nsn/app/brasbe/shared/log/nginx.error.log;
  }

  location ~ \.(php|html)$ {
    return 405;
  }
}
